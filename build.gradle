group "com.alfray.conductor"
version "1.0-SNAPSHOT"

apply plugin: "java"

repositories {
    mavenCentral()
}

configurations {
    antlr4 {
        description = "ANTLR4"
    }
}

ext.antlr = [
        antlrDestPkg: "com.alfray.conductor.parser2",
        antlrSrcDir : "src/antlr/antlr",
        antlrGenDir : "src/antlr/java"
]

sourceSets {
    main.java.srcDir antlr.antlrGenDir
}

dependencies {
    compile "com.google.guava:guava:19.0"
    compile "com.intellij:forms_rt:7.0.3"

    // antlr4 dep for building g4 to java sources, and antlr runtime for compiling generated srcs
    antlr4  group: "org.antlr", name: "antlr4",         version: "4.5.3"
    compile group: "org.antlr", name: "antlr4-runtime", version: "4.5.3"

    testCompile "junit:junit:4.11"
    testCompile "com.google.truth:truth:0.30"
    testCompile "org.mockito:mockito-core:2.2.9"
    testCompile "com.google.guava:guava:19.0"
}

jar {
    manifest {
        attributes(
            "Main-Class": "com.alfray.conductor.EntryPoint",
        )
    }
}

// Build a "fat" jar with all the dependencies. C.f. http://stackoverflow.com/questions/4871656
task fatJar(type: Jar) {
    manifest.from jar.manifest
    classifier = "all"
    from {
        configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

task mkAntlrOutputDir << {
    mkdir(antlr.antlrGenDir)
}

task genAntlrSources(dependsOn: mkAntlrOutputDir, type: JavaExec) {
    // Based on https://github.com/xoom/gradle-antlr4-template/blob/master/build.gradle
    description = "Generates Java sources from an ANTLR4 grammar."

    inputs.dir file(antlr.antlrSrcDir)
    outputs.dir file(antlr.antlrGenDir)

    logger.info("ANTLR4 inputs: " + inputs)
    logger.info("ANTLR4 outputs: " + outputs)

    def grammars = fileTree(antlr.antlrSrcDir).include("**/*.g4")

    main = "org.antlr.v4.Tool"
    classpath = configurations.antlr4
    def pkg = antlr.antlrDestPkg.replaceAll("\\.", "/")
    args = [ "-o",
             "${antlr.antlrGenDir}/${pkg}",
             /*"-atn", */
             "-listener",
             "-no-visitor",
             "-package", antlr.antlrDestPkg,
             grammars.files
    ].flatten()
}

//noinspection GroovyAssignabilityCheck
task adjustAntlrGenDir(dependsOn: genAntlrSources) << {
    description = "Adjusts files generated by ANTLR4 compilation."

    def pattern = ~/(\/\/ Generated from ).+[\/\\]([A-Za-z]+.g4 by ANTLR .*)/

    fileTree(antlr.antlrGenDir).include("**/*").each { f ->
        logger.info("Checking file $f")
        def r = new BufferedReader(new InputStreamReader(new FileInputStream(f), "UTF-8"))
        ArrayList<String> lines = new ArrayList()
        boolean rewrite = false
        r.eachLine { line ->
            def m = pattern.matcher(line)
            if (m.matches()) {
                def line2 = m[0][1] + m[0][2]
                if (line != line2) {
                    rewrite = true;
                    line = line2;
                }
            }
            lines.add(line)
        }
        r.close()

        if (rewrite) {
            logger.info("Rewrite file $f")

            def w = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(f), "UTF-8"))
            lines.each { line ->
                w.writeLine(line)
            }
            w.close()
        }
    }
}

compileJava {
    dependsOn adjustAntlrGenDir
    source antlr.antlrGenDir
}

clean {
    delete antlr.antlrGenDir
}

artifacts {
    archives fatJar
}

